// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    /*
    ARegister Input is selected based on op-code(i15), 
    either instruction or ALU output is selected. 
    */
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aInput);

    /*
    Loading of ARegister is decided based on op-code(i15), 
    if A-instruction, or destitation of C-instruction is 
    A-Register, then load A-Register.
    */
    Not(in=instruction[15], out=loadAReg1);
    Or(a=loadAReg1, b=instruction[5], out=loadAReg);
   
    /*
    Implement A-Register. 
    */
    ARegister(in=aInput, load=loadAReg, out=aOut, out[0..14]=addressM);


    /*
    Load DRegister if opcode indicates a C-instruction and 
    d2-bit of the instruction is set. 
    */
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    /*
    // DRegister will store ALU output
    */
    DRegister(in=aluOut, load=loadDReg, out=dOut);

    /*
    Decide what will be Y-input to the ALU, inM or A-Register output 
     based on a-bit of the C-instruction.
    */
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aluYIn);
    /*
    ALU inputs are described as follows - 
        X-input is DRegister output
        Y-input is decided above
        Control bits are copied from C-instruction.
        Output is used as chip output outM and aluOut.
        Output control bits zr and ng are used for controlling PC. 
    */
    ALU(x=dOut, y=aluYIn, out=aluOut, out=outM,
      zx=instruction[11], nx=instruction[10], 
      zy=instruction[9], ny=instruction[8], 
      f=instruction[7], no=instruction[6], zr=zr, ng=ng);


    /*
    ALU output control bits are used build more internal signals for 
    deciding whether to load or increment PC. 
    */
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=notzrAndnotng);
    Or(a=zr, b=ng, out=zrOrng);

    /*
    Based on jump bits of the C-instruction, destination value 
    is evaluated based on the ALU output control bits.
    */
    Mux8Way16(a=false,                      //NO Jump
        b[0]=notzrAndnotng, b[1..15]=false, //out>0 
        c[0]=zr, c[1..15]=false,            //out=0
        d[0]=notng, d[1..15]=false,         //out>=0 
        e[0]=ng, e[1..15]=false,            //out<0 
        f[0]=notzr, f[1..15]=false,         //out!=0 
        g[0]=zrOrng, f[1..15]=false,        //out<=0 
        h=true, 
        sel[0]=instruction[0],
        sel[1]=instruction[1],
        sel[2]=instruction[2], 
        out[0..7]=jumpSel, out[8..15]=jumpSelIgnore);
    
    /*
    The first 8-bits of the above Mux8Way16 output is used to identify if 
    Jump is needed or not. 
    */
    Or8Way(in=jumpSel, out=jumpYes);
    /*
    If we have C-instruction and Jump is needed, then loadPC with A-Register output.
    */
    And(a=instruction[15], b=jumpYes, out=pcload);

    /*
    If we are not loading PC then we should incrementing it. 
    */
    Not(in=pcload, out=pcinc); 

    /*
    Implement PC
    */
    PC(reset=reset, out[0..14]=pc, load=pcload, inc=pcinc, in=aOut);

    /*
    Decidnig whether aluOut is to be written to the memory based on 
    d3 bit of the C-instruction. 
    */
    Mux(b=instruction[3], a=false, sel=instruction[15], out=writeM);
}
